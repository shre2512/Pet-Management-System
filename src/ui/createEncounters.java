/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import model.databaseConnection;
import model.sendEmail;
import model.sendSMS;

/**
 *
 * @author shrey
 */
public class createEncounters extends javax.swing.JPanel {

    /**
     * Creates new form createEncounters
     */
    databaseConnection databaseConnection;
    int userID;
    sendEmail emailNotification;
    sendSMS smsNotification;
    
    public createEncounters(databaseConnection databaseConnection, int userID, sendEmail emailNotification, sendSMS smsNotification ) {
        initComponents();
        this.databaseConnection = databaseConnection;
        this.userID = userID;
        this.emailNotification = emailNotification;
        this.smsNotification = smsNotification;
        populateHospitalComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSelectHospital = new javax.swing.JLabel();
        lblSelectDoctor = new javax.swing.JLabel();
        hospitalComboBox = new javax.swing.JComboBox<>();
        doctorComboBox = new javax.swing.JComboBox<>();
        txtSymptoms = new javax.swing.JTextField();
        lblSymptoms = new javax.swing.JLabel();
        btnCreateEncounter = new javax.swing.JButton();
        lblCreateEncounters = new javax.swing.JLabel();
        dateChooserFromCreateEncounter = new com.toedter.calendar.JDateChooser();
        lblSelectDate = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 255, 255));

        lblSelectHospital.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        lblSelectHospital.setText("Select Hospital :");

        lblSelectDoctor.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        lblSelectDoctor.setText("Select Doctor :");

        hospitalComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hospitalComboBoxActionPerformed(evt);
            }
        });

        doctorComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorComboBoxActionPerformed(evt);
            }
        });

        txtSymptoms.setPreferredSize(new java.awt.Dimension(72, 22));
        txtSymptoms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSymptomsActionPerformed(evt);
            }
        });

        lblSymptoms.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        lblSymptoms.setText("Enter Symptoms:");

        btnCreateEncounter.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnCreateEncounter.setForeground(new java.awt.Color(255, 0, 0));
        btnCreateEncounter.setText("Create Encounter");
        btnCreateEncounter.setPreferredSize(new java.awt.Dimension(104, 30));
        btnCreateEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateEncounterActionPerformed(evt);
            }
        });

        lblCreateEncounters.setBackground(new java.awt.Color(255, 255, 255));
        lblCreateEncounters.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblCreateEncounters.setForeground(new java.awt.Color(255, 0, 0));
        lblCreateEncounters.setText("                                                                                      Create Encounter");

        dateChooserFromCreateEncounter.setPreferredSize(new java.awt.Dimension(88, 30));

        lblSelectDate.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        lblSelectDate.setText("Select Date :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblCreateEncounters, javax.swing.GroupLayout.DEFAULT_SIZE, 954, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(385, 385, 385)
                                .addComponent(btnCreateEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(277, 277, 277)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblSelectDoctor, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(lblSelectHospital))
                                    .addGap(98, 98, 98)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(hospitalComboBox, 0, 215, Short.MAX_VALUE)
                                        .addComponent(doctorComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(272, 272, 272)
                                            .addComponent(lblSymptoms, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(297, 297, 297)
                                            .addComponent(lblSelectDate)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 98, Short.MAX_VALUE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(dateChooserFromCreateEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtSymptoms, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCreateEncounters, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(126, 126, 126)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hospitalComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSelectHospital, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doctorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSelectDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSymptoms, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSymptoms, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateChooserFromCreateEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSelectDate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 122, Short.MAX_VALUE)
                .addComponent(btnCreateEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void populateHospitalComboBox()
    {
        try { 
            ResultSet result = databaseConnection.executeSelect("Select * FROM  hospitals");
            while(result.next())
            {
                hospitalComboBox.addItem(result.getString("hospital_name"));
            }
        } catch (Exception ex) {
            Logger.getLogger(createEncounters.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void populateDoctorComboBox(String hospital_name)
    {
        doctorComboBox.removeAllItems();
        try { 
            ResultSet result = databaseConnection.executeSelectDoctors(hospital_name);
            while(result.next())
            {
                doctorComboBox.addItem(result.getString("first_name") + " " + result.getString("last_name"));
            }
        } catch (Exception ex) {
            Logger.getLogger(createEncounters.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void hospitalComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hospitalComboBoxActionPerformed
        // TODO add your handling code here:
        String selectedHospital = hospitalComboBox.getSelectedItem().toString();
        populateDoctorComboBox(selectedHospital);
    }//GEN-LAST:event_hospitalComboBoxActionPerformed

    private void doctorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_doctorComboBoxActionPerformed

    private void txtSymptomsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSymptomsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSymptomsActionPerformed

    private void btnCreateEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateEncounterActionPerformed
        try {
            // TODO add your handling code here:
            String hospital_name = hospitalComboBox.getSelectedItem().toString();
            String doctor_name = doctorComboBox.getSelectedItem().toString();
            String symptoms = txtSymptoms.getText();
            Date date = dateChooserFromCreateEncounter.getDate();
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String strDate = dateFormat.format(date);
            databaseConnection.executeInsertEncounter(userID, hospital_name, doctor_name, symptoms, strDate);
            JOptionPane.showMessageDialog(this, "Encounter Created successfully!");
            txtSymptoms.setText("");
            
            String emailID = getEmailID(userID);
            if(emailID != null)
            {
                try {
                    emailNotification.sendEmail("Appointment Booked!", "You have booked an appointment under Dr. " + doctor_name + " on " + strDate, emailID);
                } catch (Exception ex) {
                    Logger.getLogger(petFoodJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            String phoneNumber = getPhoneNumber(userID);
            if(phoneNumber != null)
            {
                try {
                    smsNotification.sendSMS("+1" + phoneNumber, "You have booked an appointment under Dr. " + doctor_name + " on " + strDate);
                } catch (Exception ex) {
                    Logger.getLogger(petFoodJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            } catch (Exception ex) {
                Logger.getLogger(createEncounters.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_btnCreateEncounterActionPerformed
    
    private String getEmailID(int userID)
    {
        try {
            ResultSet result = databaseConnection.executeSelect("SELECT * FROM usertable");
            
            while(result.next()){
                
                if(result.getInt("id") == userID)
                {
                    return result.getString("email_id");
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(petFoodJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }
    
    private String getPhoneNumber(int userID)
    {
        try {
            ResultSet result = databaseConnection.executeSelect("SELECT * FROM usertable");
            while(result.next()){
                
                if(result.getInt("id") == userID)
                {
                    return result.getString("phone_number");
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(petFoodJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreateEncounter;
    private com.toedter.calendar.JDateChooser dateChooserFromCreateEncounter;
    private javax.swing.JComboBox<String> doctorComboBox;
    private javax.swing.JComboBox<String> hospitalComboBox;
    private javax.swing.JLabel lblCreateEncounters;
    private javax.swing.JLabel lblSelectDate;
    private javax.swing.JLabel lblSelectDoctor;
    private javax.swing.JLabel lblSelectHospital;
    private javax.swing.JLabel lblSymptoms;
    private javax.swing.JTextField txtSymptoms;
    // End of variables declaration//GEN-END:variables
}
